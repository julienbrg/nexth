import { Heading, Button } from '@chakra-ui/react'
import { Head } from '../../components/layout/Head'
import { client, server } from '@passwordless-id/webauthn'
import { useState, useEffect } from 'react'

// https://github.com/passwordless-id/webauthn

export default function Auth() {
  const [registration, setRegistration] = useState({
    authenticatorData: '',
    clientData: '',
    credential: { algorithm: '', id: '', publicKey: '' },
    username: '',
  })
  const [credentials, setCredentials] = useState({ algorithm: '', id: '', publicKey: '' })
  const [isAuthenticated, setIsAuthenticated] = useState(false)

  const register = async () => {
    console.log('registering...')
    try {
      client.isAvailable()
      console.log('Webauthn available:', client.isAvailable())

      const challenge = 'a7c61ef9-dc23-4806-b486-2428938a547e'
      const registration = await client.register('Satoshi', challenge, {
        authenticatorType: 'auto',
        userVerification: 'required',
        timeout: 60000,
        attestation: false,
        debug: false,
      })
      console.log('registration:', registration)

      setRegistration(registration)

      const expected = {
        challenge: 'a7c61ef9-dc23-4806-b486-2428938a547e', // whatever was randomly generated by the server
        origin: 'http://localhost:3000',
      }
      const registrationParsed = await server.verifyRegistration(registration, expected)
      console.log('registrationParsed:', registrationParsed)
      setCredentials(registrationParsed.credential)
      console.log('credential.id:', registrationParsed.credential.id)
    } catch (e) {
      console.log('error:', e)
    }
  }
  const signin = async () => {
    console.log('signing in...')

    try {
      const challenge = '56535b13-5d93-4194-a282-f234c1c24500'
      const authentication = await client.authenticate([credentials.id], challenge, {
        authenticatorType: 'auto',
        userVerification: 'required',
        timeout: 60000,
      })
      console.log('authentication:', authentication)

      const credentialKey = {
        // obtained from database by looking up `authentication.credentialId`
        id: credentials.id,
        publicKey: credentials.publicKey,
        algorithm: 'ES256',
      } as const
      console.log('credentialKey:', credentialKey)

      const expected = {
        challenge: '56535b13-5d93-4194-a282-f234c1c24500', // whatever was randomly generated by the server.
        origin: 'http://localhost:3000',
        userVerified: true, // should be set if `userVerification` was set to `required` in the authentication options (default)
        counter: 0, // for enhanced security, you can store the number of times this authenticator was used and ensure it increases each time
      }
      const authenticationParsed = await server.verifyAuthentication(authentication, credentialKey, expected)

      console.log('authenticationParsed:', authenticationParsed)
      setIsAuthenticated(true)
    } catch (e) {
      console.log('error:', e)
    }
  }

  return (
    <>
      <main>
        <Heading as="h2">4337</Heading>

        <br />
        {!registration.username ? (
          <p>Welcome to the 4337 page!</p>
        ) : (
          <p>
            You&apos;re registered as <strong>{registration.username}</strong>! âœ…
          </p>
        )}
        <br />
        {credentials.id === '' ? (
          ''
        ) : (
          <>
            <p>This is your &apos;id&apos;: {credentials.id.toString()}</p>
            <p>This is your &apos;public key&apos;: {credentials.publicKey.toString()}</p>
          </>
        )}
        <br />

        <Button colorScheme="green" variant="outline" onClick={register}>
          Register
        </Button>

        <Button m={[2, 3]} colorScheme="blue" variant="outline" onClick={signin}>
          Sign in
        </Button>

        <br />

        <br />
      </main>
    </>
  )
}
